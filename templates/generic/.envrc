SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

open_devshell() {
    # try to update the nixpkgs input to the nixpkgs version of our system
    NESTO_SYSTEM_NIXPKGS_VERSION=$(nix registry list | grep "system flake:nixpkgs" | cut -d" " -f3)
    nix flake update --override-input nixpkgs "${NESTO_SYSTEM_NIXPKGS_VERSION}" "${SCRIPT_DIR}/.nix"

    if [ ! -z "$NESTO_NIX_DEVSHELL_COMMAND" ]; then
        NIXPKGS_ALLOW_INSECURE=1 nix-shell "${SCRIPT_DIR}/.nix/default.nix" --command "${NESTO_NIX_DEVSHELL_COMMAND} ${SCRIPT_DIR}"
    else
        NIXPKGS_ALLOW_INSECURE=1 nix-shell "${SCRIPT_DIR}/.nix/default.nix"
    fi
    echo "Started VSCode in nix develop shell."

    # if the repo has a .gitmodules file, we initialize the submodules for the developer
    if [ -f "${SCRIPT_DIR}/.gitmodules" ]; then
        echo "A .gitmodules files was found. Initializing submodules."
        (cd ${SCRIPT_DIR} && git submodule update --init --recursive)
    fi

    if [ ! -z "$NESTO_DESKTOP_LAUNCH" ]; then
        sleep 3
        exit 0; # note: we do not have to detach the process from shell because vscode forks properly on its own
    fi 
}

if [ -z "$NESTO_NIX_DEVSHELL" ]; then
    if [ -z "$NESTO_NON_INTERACTIVE" ]; then
        read -p "Do you want to enter a nix develop shell? (y/n)" -r answer 
        if [ "$answer" = "${answer#[Yy]}" ] ;then
            echo "Skipped devshell start.";
        else
            open_devshell
        fi
    else
        open_devshell
    fi
fi
